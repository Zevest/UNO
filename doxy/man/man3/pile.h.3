.TH "UNO/include/pile.h" 3 "Samedi 2 Mai 2020" "Version 1.3" "UNO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UNO/include/pile.h
.SH SYNOPSIS
.br
.PP
\fC#include 'carte\&.h'\fP
.br

.SS "Structures de données"

.in +1c
.ti -1c
.RI "struct \fBpile\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBPILE_MAX\fP   256"
.br
.in -1c
.SS "Définitions de type"

.in +1c
.ti -1c
.RI "typedef struct \fBpile\fP \fBpile_t\fP"
.br
.in -1c
.SS "Énumérations"

.in +1c
.ti -1c
.RI "enum \fBbool\fP { \fBfalse\fP, \fBtrue\fP }"
.br
.in -1c
.SS "Fonctions"

.in +1c
.ti -1c
.RI "\fBpile_t\fP * \fBpile_Init\fP (void)"
.br
.RI "Initialise la pile de carte\&. "
.ti -1c
.RI "void \fBpile_Push\fP (\fBpile_t\fP *p, \fBcard_t\fP *c)"
.br
.RI "Ajoute une carte au sommet de la pile\&. "
.ti -1c
.RI "\fBcard_t\fP * \fBpile_Pop\fP (\fBpile_t\fP *p)"
.br
.RI "Renvoie le premier element de la pile\&. "
.ti -1c
.RI "int \fBpile_Remove\fP (\fBpile_t\fP *p, int i)"
.br
.RI "Supprime la carte avec l'indice index de la pile\&. "
.ti -1c
.RI "int \fBpile_Empty\fP (\fBpile_t\fP *p)"
.br
.RI "Vérifie si la pile est vide\&. "
.ti -1c
.RI "\fBcard_t\fP * \fBpile_GetTop\fP (\fBpile_t\fP *p)"
.br
.RI "Renvoie le sommet de la pile\&. "
.ti -1c
.RI "void \fBpile_FillDeck\fP (\fBpile_t\fP *p)"
.br
.RI "initialiser le paquet "
.ti -1c
.RI "void \fBpile_Distribute\fP (int n, \fBpile_t\fP *src, \fBpile_t\fP *dest)"
.br
.RI "distribue n cartes "
.ti -1c
.RI "void \fBpile_Shuffle\fP (\fBpile_t\fP *src, \fBpile_t\fP *dst, int n)"
.br
.RI "Mélange les cartes d'un paquets sources vers un paquets destination\&. "
.in -1c
.SH "Documentation des macros"
.PP 
.SS "#define PILE_MAX   256"

.PP
Définition à la ligne 5 du fichier pile\&.h\&.
.SH "Documentation des définitions de type"
.PP 
.SS "typedef struct \fBpile\fP \fBpile_t\fP"

.PP
Définition à la ligne 1 du fichier pile\&.h\&.
.SH "Documentation du type de l'énumération"
.PP 
.SS "enum \fBbool\fP"

.PP
\fBValeurs énumérées\fP
.in +1c
.TP
\fB\fIfalse \fP\fP
.TP
\fB\fItrue \fP\fP
.PP
Définition à la ligne 18 du fichier pile\&.h\&.
.SH "Documentation des fonctions"
.PP 
.SS "void pile_Distribute (int n, \fBpile_t\fP * src, \fBpile_t\fP * dest)"

.PP
distribue n cartes Déplace N carte de la pile source vers la pile destination\&. 
.PP
\fBParamètres\fP
.RS 4
\fIn\fP nombre de carte a déplacer 
.br
\fIsrc\fP pile source 
.br
\fIdst\fP pile destination 
.RE
.PP

.PP
Définition à la ligne 116 du fichier pile\&.c\&.
.SS "int pile_Empty (\fBpile_t\fP * p)"

.PP
Vérifie si la pile est vide\&. Verifie si la pile est vide\&. 
.PP
\fBParamètres\fP
.RS 4
\fIp\fP pile 
.RE
.PP
\fBRenvoie\fP
.RS 4
1 sio la pile est vide, 0 sinon\&. 
.RE
.PP

.PP
Définition à la ligne 34 du fichier pile\&.c\&.
.SS "void pile_FillDeck (\fBpile_t\fP * p)"

.PP
initialiser le paquet Remplie la pile deu bon nombre de chaque carte\&. 
.PP
\fBParamètres\fP
.RS 4
\fIp\fP pile 
.RE
.PP

.PP
Définition à la ligne 131 du fichier pile\&.c\&.
.SS "\fBcard_t\fP* pile_GetTop (\fBpile_t\fP * p)"

.PP
Renvoie le sommet de la pile\&. Recupere la carte au sommet de la pile\&. 
.PP
\fBParamètres\fP
.RS 4
\fIp\fP pile 
.RE
.PP
\fBRenvoie\fP
.RS 4
carte au sommet 
.RE
.PP

.PP
Définition à la ligne 22 du fichier pile\&.c\&.
.SS "\fBpile_t\fP* pile_Init (void)"

.PP
Initialise la pile de carte\&. Initialise la Pile\&. 
.PP
\fBRenvoie\fP
.RS 4
Pile crée 
.RE
.PP

.PP
Définition à la ligne 14 du fichier pile\&.c\&.
.SS "\fBcard_t\fP* pile_Pop (\fBpile_t\fP * p)"

.PP
Renvoie le premier element de la pile\&. Retire une carte du sommet de la pile\&. 
.PP
\fBParamètres\fP
.RS 4
\fIp\fP pile 
.RE
.PP
\fBRenvoie\fP
.RS 4
carte retirer\&. 
.RE
.PP

.PP
Définition à la ligne 60 du fichier pile\&.c\&.
.SS "void pile_Push (\fBpile_t\fP * p, \fBcard_t\fP * c)"

.PP
Ajoute une carte au sommet de la pile\&. Ajoute un carte ausommet de la pile\&. 
.PP
\fBParamètres\fP
.RS 4
\fIp\fP pile 
.br
\fIc\fP carte à ajouter 
.RE
.PP

.PP
Définition à la ligne 28 du fichier pile\&.c\&.
.SS "int pile_Remove (\fBpile_t\fP * p, int i)"

.PP
Supprime la carte avec l'indice index de la pile\&. Retire une carte d'indice i de la pile\&. 
.PP
\fBParamètres\fP
.RS 4
\fIp\fP pile 
.br
\fIindice\fP de la carte 
.RE
.PP
\fBRenvoie\fP
.RS 4
1 si la carte a bien été retirer 0 sinon\&. 
.RE
.PP

.PP
Définition à la ligne 40 du fichier pile\&.c\&.
.SS "void pile_Shuffle (\fBpile_t\fP * src, \fBpile_t\fP * dst, int n)"

.PP
Mélange les cartes d'un paquets sources vers un paquets destination\&. Déplace et mélange les cartes de la pile source vers la pile destination\&. Les cartes dont l'indice est inférieur n sont ignorées\&. 
.PP
\fBParamètres\fP
.RS 4
\fIsrc\fP pile source 
.br
\fIdst\fP pile destination 
.br
\fIn\fP nombre de carte à laisser 
.RE
.PP

.PP
Définition à la ligne 68 du fichier pile\&.c\&.
.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour UNO à partir du code source\&.
